on:
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:
  push:

jobs:
  check:
    name: Check Version
    runs-on: ubuntu-latest
    
    outputs:
      versionINDI: ${{ steps.fetch_tags.outputs.indi }}
      versionINDI3rdPARTY: ${{ steps.fetch_tags.outputs.indi-3rdparty }}
      versionKStars: ${{ steps.fetch_tags.outputs.kstars }}
    steps:
      - name: Restore
        id: load_cache_release
        uses: actions/cache@v4
        with:
          path: latest_releases.json
          key: release-tags-${{ github.run_id }}
          restore-keys: release-tags-
      - name: Fetch latest tags
        id: fetch_tags
        run: |
          REPOS=("indilib/indi" "indilib/indi-3rdparty" "KDE/kstars")
          echo "repos=${REPOS[*]}" >> $GITHUB_ENV
          if [ ! -f last_releases.json ]; then
            echo "{}" > last_releases.json
          fi
          
          echo "{" > new_releases.json
          NEEDS_UPDATE=false
          RAN=false
          for repo in ${REPOS[*]}; do
            if [ "$RAN" = "true" ]; then
              echo "," >> new_releases.json
            fi
            RAN=true
            LATEST_TAG=$(curl -s https://api.github.com/repos/$repo/releases/latest | jq -r .tag_name)
            PREVIOUS_TAG=$(jq -r --arg rep "$repo" '.[$rep] // ""' latest_releases.json)
            echo "${repo#*/}=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "Previous release for $repo(${repo#*/}): $PREVIOUS_TAG"
            if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ]; then
              echo "New release detected for $repo: $LATEST_TAG"
              NEEDS_UPDATE=true
            fi
            echo -n "    \"$repo\": \"$LATEST_TAG\"" >> new_releases.json
          done
          echo "" >> new_releases.json
          echo "}" >> new_releases.json

          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_ENV
          if [ "$NEEDS_UPDATE" = "true" ]; then
            mv new_releases.json latest_releases.json            
          fi

  print:
    name: Print the result from check
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: do stuff
        if: env.needs_update == 'true'
        run: |
          echo "UPDATE"
      - run: |
          echo '${{ needs.check.outputs.versionINDI }}'
          echo '${{ needs.check.outputs.versionINDI3rdPARTY }}'
          echo '${{ needs.check.outputs.versionKStars }}'
