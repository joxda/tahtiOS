on:
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:
  push:

jobs:
  check:
    name: Check Version
    runs-on: ubuntu-latest
    
    outputs:
      versionINDI: ${{ steps.fetch_tags.outputs.indi }}
      versionINDI3rdPARTY: ${{ steps.fetch_tags.outputs.indi-3rdparty }}
      versionKStars: ${{ steps.fetch_tags.outputs.kstars }}
      versionLibXISF: ${{ steps.fetch_tags.outputs.libXISF }}
      versionStellarSolver: ${{ steps.fetch_tags.outputs.stellarsolver }}
      needs_update: ${{ steps.fetch_tags.outputs.needs_update }}
    steps:
      - name: Restore
        id: load_cache_release
        uses: actions/cache@v4
        with:
          path: latest_releases.json
          key: release-tags-${{ github.run_id }}
          restore-keys: release-tags-
      - name: Fetch latest tags
        id: fetch_tags
        run: |
          REPOS=("indilib/indi" "indilib/indi-3rdparty" "rlancaste/stellarsolver" "joxda/libXISF")
          echo "repos=${REPOS[*]}" >> $GITHUB_ENV
          
          echo "{" > new_releases.json
          NEEDS_UPDATE=false
          RAN=false
          for repo in ${REPOS[*]}; do
            if [ "$RAN" = "true" ]; then
              echo "," >> new_releases.json
            fi
            #RAN=true
            LATEST_TAG=$(curl -s https://api.github.com/repos/$repo/releases/latest | jq -r .tag_name)
            PREVIOUS_TAG=$(jq -r --arg rep "$repo" '.[$rep] // ""' latest_releases.json)
            if [ -z "$LATEST_TAG" ]; then
               LATEST_TAG=$(curl -s https://api.github.com/repos/$repo/tags | jq -r '.[0].name')
            fi
            if [ "$LATEST_TAG" = "null" ]; then
               LATEST_TAG=$(curl -s https://api.github.com/repos/$repo/tags | jq -r '.[0].name')
            fi
            echo "${repo#*/}=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "Previous release for $repo(${repo#*/}): $PREVIOUS_TAG"
            if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ]; then
              echo "New release detected for $repo: $LATEST_TAG"
              NEEDS_UPDATE=true
            fi
            echo  "    \"$repo\": \"$LATEST_TAG\"," >> new_releases.json
          done
          LATEST_TAG=$(git ls-remote -h https://invent.kde.org/kde/kstars.git | grep '\/stable-*' | tail -n1 | sed 's/\// /g' | awk '{print $4}')
          PREVIOUS_TAG=$(jq -r --arg rep "kstars" '.[$rep] // ""' latest_releases.json)
          echo -n "    \"kstars\": \"$LATEST_TAG\"" >> new_releases.json          
          echo "}" >> new_releases.json

          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ]; then
              echo "New release detected for kstars: $LATEST_TAG"
              NEEDS_UPDATE=true
          fi
          echo "kstars=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT
          if [ "$NEEDS_UPDATE" = "true" ]; then
            mv new_releases.json latest_releases.json            
          fi



  dothings:
    name: Print the result from check
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: Pi Image
        if: needs.check.outputs.needs_update == 'true'
        id: latestImage
        run: | 
          LATEST_VERSION=$(curl -s https://downloads.raspberrypi.com/raspios_arm64/images/ | grep -oP '(?<=href=")[^"]+(?=")' | sort | tail -n 1)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
          echo "Cache Key: raspios-${LATEST_VERSION}"
      - name: Restore
        if: needs.check.outputs.needs_update == 'true'
        id: cache-restore 
        uses: actions/cache/restore@v4 
        with: 
          path: raspios_arm64-latest.img.xz 
          key: raspios-${{ env.LATEST_VERSION }} 
          restore-keys: raspios- 
      - name: DownloadImage
        if: steps.cache-restore.outputs.cache-hit != 'true' 
        run: | 
          LATEST_DIR="https://downloads.raspberrypi.com/raspios_arm64/images/${LATEST_VERSION}"
          LATEST_FILE=$(curl -s "$LATEST_DIR" | grep -oP '(?<=href=")[^"]+\.img\.xz(?=)' | head -n 1)
          echo "RaspiVERSION=$LATEST_FILE" >> $GITHUB_ENV
          DOWNLOAD_URL=${LATEST_DIR}${LATEST_FILE}
          wget -O raspios_arm64-latest.img.xz "$DOWNLOAD_URL" 
      - name: Save to Cache 
        if: steps.cache-restore.outputs.cache-hit != 'true' 
        uses: actions/cache/save@v4 
        with:
          path: raspios_arm64-latest.img.xz
          key: raspios-${{env.LATEST_VERSION }}
      - name: do stuff
        if: needs.check.outputs.needs_update == 'true'
        run: |
          echo "UPDATE"
          #unxz < raspios_arm64-latest.img.xz > input.img
      - name: "Prepare release"
          run: |
            now=$(date +"%Y%m%d%H%M%S")
            RELEASE_NAME="TahtiOS (build $now)"# TODO "${{ env.OCTOPI_VERSION }} with OctoPrint ${{ env.OCTOPRINT_VERSION }} 
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

            RELEASE_TAG=TODO-$now #"${{ env.OCTOPI_VERSION }}-${{ env.OCTOPRINT_VERSION }}-$now"
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        # release body
            cat <<EOF > ./build/release.md
  
              * INDI ${{ needs.check.outputs.versionINDI }}
              * KStars ${{ needs.check.outputs.versionKStars }}
              * based on RaspiOS ${{ env.RaspiVERSION }}
              * tahtiOS TODO COMMIT/TAG/RELEASE
          
              Created with [CustoPiZer](https://github.com/OctoPrint/CustoPiZer)

            EOF
      
      - name: "Prepare" #-> move stuff to scripts / scripts/files
        run: |
          mkdir scripts
          cat <<EOF > scripts/01-start.sh
            set -x
            set -e
            export LC_ALL=C
            source /common.sh
            install_cleanup_trap
            sudo useradd -m -G sudo -s /bin/bash tahti
            echo "tahti:tahti" | sudo chpasswd
            touch workspace/bootfs/ssh
            echo "enabled=1" | sudo tee -a woekspace/rootfs/etc/vnc/config.d/common
            passwd --expire tahti
          EOF
      - name: "Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@main
        with:
          workspace: "${{ github.workspace }}/build"
          scripts:  "${{ github.workspace }}/scripts"
      - name: "Rename image"
        run: |
          RELEASE_TAG="${{ env.RELEASE_TAG }}" # TODO
      
          IMAGE="tahtiOS-$RELEASE_TAG.img"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

          cd build
          mv output.img $IMAGE
      - name: "Package the image"
        id: package-image
        uses: OctoPrint/actions/package-rpi-image@main
        with:
          image_path: "${{ env.IMAGE }}"

      - name: Export zip name and URL to env
        run: |
          echo "IMAGE_ZIP=${{ steps.package-image.outputs.zip_name }}" >> $GITHUB_ENV
          echo "IMAGE_URL=https://github.com/joxda/tahtiOS/releases/download/${{ env.RELEASE_TAG }}/${{ steps.package-image.outputs.zip_name }}" >> $GITHUB_ENV # TODO RELEASE_TAG

      - name: "Generate rpi-imager.json snippet"
        uses: OctoPrint/actions/rpi-imager-snippet@main
        with:
          name: "${{ env.RELEASE_NAME }}"
          description: "A Raspberry Pi TODO" #distribution for 3d printers. Ships OctoPrint ${{ env.OCTOPRINT_VERSION }} out-of-the-box."
      #  TODO  icon: "https://octopi.octoprint.org/rpi-imager.png"
          url: "${{ env.IMAGE_URL }}"
          output: "build/rpi-imager.json"
          image_sha256: ${{ steps.package-image.outputs.image_sha256 }}
          image_size: ${{ steps.package-image.outputs.image_size }}
          zip_sha256: ${{ steps.package-image.outputs.zip_sha256 }}
          zip_size: ${{ steps.package-image.outputs.zip_size }}
          devices: "pi5-64bit,pi4-64bit,pi3-64bit" #CHECK

      - name: "Create release & attach assets"
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ env.RELEASE_NAME }}"
          tag_name: "${{ env.RELEASE_TAG }}"
          body_path: "build/release.md"
          fail_on_unmatched_files: true
          files: |
            build/${{ env.IMAGE_ZIP }}
            build/${{ env.IMAGE_ZIP }}.md5
            build/${{ env.IMAGE_ZIP }}.sha256
            build/rpi-imager.json
      # env:
      #  TODO  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



# scripts -> 01--- etc, run in order
# should start with 
#set -x
#set -e
#export LC_ALL=C
#source /common.sh
#install_cleanup_trap
